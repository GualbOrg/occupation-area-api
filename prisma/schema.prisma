generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                 String               @id
  name               String               @db.VarChar(50)
  lastName           String               @db.VarChar(50)
  email              String               @unique(map: "Profile.email_unique")
  nickName           String               @db.VarChar(30)
  role               Role                 @default(USER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  AddressProfile     AddressProfile?
  BusinessProfile    BusinessProfile?
  CompanyProfile     CompanyProfile?
  ProfileConections  ProfileConections[]
  ProfilePosts       ProfilePosts[]
  ProfilePostsLikes  ProfilePostsLikes[]
  ProfilePostsShared ProfilePostsShared[]
  ProfileSites       ProfileSites[]
}

model AddressProfile {
  id           String   @id
  street       String   @db.VarChar(100)
  neighborhood String   @db.VarChar(100)
  number       String   @db.VarChar(50)
  city         String   @db.VarChar(100)
  UF           UF
  complement   String   @db.VarChar(30)
  profileId    String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model BusinessProfile {
  id                            String                         @id
  portfolio                     String                         @unique @db.VarChar(150)
  linkedin                      String                         @unique @db.VarChar(150)
  profileId                     String                         @unique
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime
  phoneNumber                   String                         @unique @db.VarChar(15)
  Profile                       Profile                        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  BusinessProfileActuationAreas BusinessProfileActuationAreas?

  @@index([linkedin])
  @@index([phoneNumber])
  @@index([profileId])
}

model LinkMetrics {
  id                  String            @id
  DA                  Int
  PA                  Int
  spamScore           Int
  niche               String
  traffic             Float
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  profileSitesLinksId String            @unique
  ProfileSitesLinks   ProfileSitesLinks @relation(fields: [profileSitesLinksId], references: [id], onDelete: Cascade)
}

model ProfileConections {
  profileId   String
  conectionId String
  Profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, conectionId])
  @@unique([profileId, conectionId])
  @@index([profileId, conectionId])
}

model ProfilePosts {
  id                 String               @id
  profileId          String
  content            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  Profile            Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ProfilePostsLikes  ProfilePostsLikes[]
  ProfilePostsShared ProfilePostsShared[]
}

model ProfilePostsLikes {
  profileId      String
  profilePostsId String
  Profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ProfilePosts   ProfilePosts @relation(fields: [profilePostsId], references: [id], onDelete: Cascade)

  @@id([profileId, profilePostsId])
  @@unique([profileId, profilePostsId])
  @@index([profileId, profilePostsId])
}

model ProfilePostsShared {
  profileId      String
  profilePostsId String
  Profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ProfilePosts   ProfilePosts @relation(fields: [profilePostsId], references: [id], onDelete: Cascade)

  @@id([profileId, profilePostsId])
  @@unique([profileId, profilePostsId])
  @@index([profileId, profilePostsId])
}

model ProfileSites {
  id                  String               @id
  url                 String               @unique
  profileId           String
  niche               String
  tradeLink           Boolean
  tradePost           Boolean
  salesLink           Boolean
  DA                  Int
  PA                  Int
  traffic             Float
  backlinks           Int
  plagiarism          Int
  spamScore           Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  mainKeyord          String
  keywords            String[]
  Profile             Profile              @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ProfileSitesContact ProfileSitesContact?
  ProfileSitesLinks   ProfileSitesLinks[]
  SiteMetrics         SiteMetrics?
}

model ProfileSitesContact {
  id             String       @id
  email          String
  phone          String
  link           String
  profileSitesId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  ProfileSites   ProfileSites @relation(fields: [profileSitesId], references: [id], onDelete: Cascade)
}

model ProfileSitesLinks {
  id            String       @id
  profileSiteId String
  url           String
  niche         String
  backlinks     Int
  DA            String
  PA            String
  traffic       String
  plagiarism    String
  spamScore     Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  mainKeyord    String
  salesLink     Boolean
  tradeLink     Boolean
  keywords      String[]
  ProfileSites  ProfileSites @relation(fields: [profileSiteId], references: [id], onDelete: Cascade)
  LinkMetrics   LinkMetrics?
}

model SiteMetrics {
  id             String       @id
  profileSitesId String       @unique
  DA             Int
  PA             Int
  spamScore      Int
  niche          String
  traffic        Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  ProfileSites   ProfileSites @relation(fields: [profileSitesId], references: [id], onDelete: Cascade)
}

model ActuationAreas {
  id                            ActuactionAreasEnum             @id
  description                   String                          @db.VarChar(150)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @default(now())
  BusinessProfileActuationAreas BusinessProfileActuationAreas[]

  @@index([description])
}

model BusinessProfileActuationAreas {
  id                String              @id
  businessProfileId String              @unique
  actuationAreas    ActuactionAreasEnum
  workValue         Float
  amountChargedBy   AmountChargedBy
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  ActuationAreas    ActuationAreas      @relation(fields: [actuationAreas], references: [id], onDelete: Cascade)
  BusinessProfile   BusinessProfile     @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  @@unique([businessProfileId, actuationAreas])
  @@index([actuationAreas])
}

model CompanyProfile {
  id              String            @id
  profileId       String            @unique
  companySectorId CompanySectorEnum
  site            String            @unique @db.VarChar(300)
  fantasyName     String            @unique @db.VarChar(300)
  linkedin        String            @unique @db.VarChar(300)
  phoneNumber     String            @unique @db.VarChar(15)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  CompanySector   CompanySector     @relation(fields: [companySectorId], references: [id], onDelete: Cascade)
  Profile         Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, companySectorId])
  @@index([companySectorId])
}

model CompanySector {
  id             CompanySectorEnum @id
  name           String            @unique
  description    String            @db.VarChar(150)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
  CompanyProfile CompanyProfile[]

  @@index([name])
}

enum AmountChargedBy {
  HOUR
  DAY
  MOUNTH
  WORD
}

enum Role {
  USER
  ADMIN
}

enum UF {
  SP
  RJ
  SC
  MG
  AM
}

enum ActuactionAreasEnum {
  REDACTOR
  PROGRAMMER
  SEO_ESPECIALIST
  SITES_OPTIMIZATION
  MARKETING
  DESIGNER
  DEVOPS
  VIDEO_MAKER
}

enum CompanySectorEnum {
  MARKETING_AGENCY
  SOFTWARE_AGENCY
  SEO_AGENCY
  DESIGN_AGENCY
}
